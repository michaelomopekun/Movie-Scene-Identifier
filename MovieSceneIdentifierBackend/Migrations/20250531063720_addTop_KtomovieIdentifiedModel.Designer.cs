// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MovieSceneIdentifierBackend.Migrations
{
    [DbContext(typeof(MovieIdentifierDbContext))]
    [Migration("20250531063720_addTop_KtomovieIdentifiedModel")]
    partial class addTop_KtomovieIdentifiedModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MovieIdentified", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Top_K")
                        .HasColumnType("integer");

                    b.Property<string>("UploadedClipId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MoviesIdentified");
                });

            modelBuilder.Entity("UploadedClip", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CloudinaryFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CloudinaryFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CloudinaryFileSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CloudinaryFileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CloudinaryPublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MovieIdentifiedId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MovieIdentifiedId");

                    b.ToTable("UploadedClips");
                });

            modelBuilder.Entity("UploadedClip", b =>
                {
                    b.HasOne("MovieIdentified", "MovieIdentified")
                        .WithMany("UploadedClips")
                        .HasForeignKey("MovieIdentifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieIdentified");
                });

            modelBuilder.Entity("MovieIdentified", b =>
                {
                    b.Navigation("UploadedClips");
                });
#pragma warning restore 612, 618
        }
    }
}
